#!/bin/bash

# Create application containers from OCI images

# Copyright © 2014 Stéphane Graber <stgraber@ubuntu.com>
# Copyright © 2017 Serge Hallyn <serge@hallyn.com>
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.

#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.

#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
#  USA

set -eu
# set -x  # debug

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

# Check for required binaries
for bin in skopeo umoci jq; do
    if ! type $bin >/dev/null 2>&1; then
        echo "ERROR: Missing required tool: $bin" 1>&2
        exit 1
    fi
done

LXC_TEMPLATE_CONFIG="@LXCTEMPLATECONFIG@"

# Some useful functions
cleanup() {
    if [ -d "$DOWNLOAD_TEMP" ]; then
        rm -Rf $DOWNLOAD_TEMP
    fi
}

in_userns() {
    [ -e /proc/self/uid_map ] || { echo no; return; }
    while read line; do
        fields=$(echo $line | awk '{ print $1 " " $2 " " $3 }')
        [ "$fields" = "0 0 4294967295" ] && { echo no; return; } || true
        echo $fields | grep -q " 0 1$" && { echo userns-root; return; } || true
    done < /proc/self/uid_map

    [ "$(cat /proc/self/uid_map)" = "$(cat /proc/1/uid_map)" ] && \
        { echo userns-root; return; }
    echo yes
}

getconfigpath() {
	basedir="$1"
	q="$2"

	digest=`cat "${basedir}/index.json" | jq --arg q "$q" '.manifests[] | if .annotations."org.opencontainers.image.ref.name" == $q then .digest else null end' | sed -e 's/"//g'`
	if [ -z "${digest}" ]; then
		echo "$q not found in index.json" >&2
		return
	fi

	# Ok we have the image config digest, now get the config from that,
	d=${digest:7}
	cdigest=`cat "${basedir}/blobs/sha256/${d}" | jq '.config.digest' | sed -e 's/"//g'`
	if [ -z "${cdigest}" ]; then
		echo "container config not found" >&2
		return
	fi

	d2=${cdigest:7}
	echo "${basedir}/blobs/sha256/${d2}"
	return
}

# get entrypoint from oci image.  Use sh if unspecified
getep() {
	if [ "$#" -eq 0 ]; then
		echo "/bin/sh"
		return
	fi

	configpath="$1"

	ep=`cat "${configpath}" | jq -c '.config.Entrypoint' | sed -e 's/^\[//; s/\]$//; s/","/" "/'`
	cmd=`cat "${configpath}" | jq -c '.config.Cmd' | sed -e 's/^\[//; s/\]$//; s/","/" "/'`
	if [ "${ep}" = "null" ]; then
		ep="${cmd}"
		if [ "${ep}" = "null" ]; then
			ep="/bin/sh"
		fi
	elif [ "${cmd}" != "null" ]; then
		ep="${ep} ${cmd}"
	fi

	if [ -z "${ep}" ]; then
		echo "/bin/sh"
		return
	fi
	echo "${ep}"
	return
}

# get environment from oci image.
getenv() {
	if [ "$#" -eq 0 ]; then
		return
	fi

	configpath="$1"

	cat "${configpath}" > /tmp/config
	env=`cat "${configpath}" | jq -c '.config.Env[]'`

	echo "${env}"
	return
}

usage() {
    cat <<EOF
LXC container template for OCI images

Special arguments:
[ -h | --help ]: Print this help message and exit.

Required arguments:
[ -u | --url <url> ]: The OCI image URL

Optional arguments:
[ --username <username> ]: The username for the registry
[ --password <password> ]: The password for the registry

LXC internal arguments (do not pass manually!):
[ --name <name> ]: The container name
[ --path <path> ]: The path to the container
[ --rootfs <rootfs> ]: The path to the container's rootfs
[ --mapped-uid <map> ]: A uid map (user namespaces)
[ --mapped-gid <map> ]: A gid map (user namespaces)

EOF
    return 0
}

options=$(getopt -o u:h -l help,url:,username:,password:,\
name:,path:,rootfs:,mapped-uid:,mapped-gid: -- "$@")

if [ $? -ne 0 ]; then
    usage
    exit 1
fi
eval set -- "$options"

OCI_URL=""
OCI_USERNAME=
OCI_PASSWORD=

LXC_MAPPED_GID=
LXC_MAPPED_UID=
LXC_NAME=
LXC_PATH=
LXC_ROOTFS=

while :; do
    case "$1" in
        -h|--help)          usage && exit 1;;
        -u|--url)           OCI_URL=$2; shift 2;;
        --username)         OCI_USERNAME=$2; shift 2;;
        --password)         OCI_PASSWORD=$2; shift 2;;
        --name)             LXC_NAME=$2; shift 2;;
        --path)             LXC_PATH=$2; shift 2;;
        --rootfs)           LXC_ROOTFS=$2; shift 2;;
        --mapped-uid)       LXC_MAPPED_UID=$2; shift 2;;
        --mapped-gid)       LXC_MAPPED_GID=$2; shift 2;;
        *)                  break;;
    esac
done

# Check that we have all variables we need
if [ -z "$LXC_NAME" ] || [ -z "$LXC_PATH" ] || [ -z "$LXC_ROOTFS" ]; then
    echo "ERROR: Not running through LXC." 1>&2
    exit 1
fi

if [ -z "$OCI_URL" ]; then
    echo "ERROR: no OCI URL given"
    exit 1
fi

if [ -n "$OCI_PASSWORD" ] && [ -z "$OCI_USERNAME" ]; then
    echo "ERROR: password given but no username specified"
    exit 1
fi

USERNS=$(in_userns)

if [ "$USERNS" != "no" ]; then
    if [ "$USERNS" = "yes" ]; then
        if [ -z "$LXC_MAPPED_UID" ] || [ "$LXC_MAPPED_UID" = "-1" ]; then
            echo "ERROR: In a user namespace without a map." 1>&2
            exit 1
        fi
        DOWNLOAD_MODE="user"
        DOWNLOAD_TARGET="user"
    else
        DOWNLOAD_MODE="user"
        DOWNLOAD_TARGET="system"
    fi
fi

# Trap all exit signals
trap cleanup EXIT HUP INT TERM

if ! type mktemp >/dev/null 2>&1; then
    DOWNLOAD_TEMP=/tmp/lxc-oci.$$
    mkdir -p $DOWNLOAD_TEMP
else
    DOWNLOAD_TEMP=$(mktemp -d)
fi

# Download the image - TODO - cache
skopeo_args=("")
if [ -n "$OCI_USERNAME" ]; then
    CREDENTIALS="${OCI_USERNAME}"
    if [ -n "$OCI_PASSWORD" ]; then
        CREDENTIALS="${CREDENTIALS}:${OCI_PASSWORD}"
    fi
    skopeo_args+=(--src-creds "${CREDENTIALS}")
fi
skopeo copy ${skopeo_args[@]} "${OCI_URL}" "oci:${DOWNLOAD_TEMP}:latest"

# Unpack the rootfs
echo "Unpacking the rootfs"

umoci_args=("")
if [ -n "$LXC_MAPPED_UID" ] && [ "$LXC_MAPPED_UID" != "-1" ]; then
    umoci_args+=(--rootless)
fi
umoci unpack ${umoci_args[@]} --image "${DOWNLOAD_TEMP}:latest" "${LXC_ROOTFS}.tmp"
rmdir "${LXC_ROOTFS}"
mv "${LXC_ROOTFS}.tmp/rootfs" "${LXC_ROOTFS}"
rm -rf "${LXC_ROOTFS}.tmp"

OCI_CONF_FILE=$(getconfigpath ${DOWNLOAD_TEMP} latest)
LXC_CONF_FILE="${LXC_PATH}/config"
entrypoint=$(getep ${OCI_CONF_FILE})
echo "lxc.execute.cmd = '${entrypoint}'" >> "${LXC_CONF_FILE}"
echo "lxc.mount.auto = proc:mixed sys:mixed cgroup:mixed" >> "${LXC_CONF_FILE}"

environment=$(getenv ${OCI_CONF_FILE})
while read -r line; do
    echo "lxc.environment = ${line}" >> "${LXC_CONF_FILE}"
done <<< "${environment}"

if [ -e "${LXC_TEMPLATE_CONFIG}/common.conf" ]; then
    echo "lxc.include = ${LXC_TEMPLATE_CONFIG}/common.conf" >> "${LXC_CONF_FILE}"
fi

if [ -n "$LXC_MAPPED_UID" ] && [ "$LXC_MAPPED_UID" != "-1" ] && [ -e "${LXC_TEMPLATE_CONFIG}/userns.conf" ]; then
    echo "lxc.include = ${LXC_TEMPLATE_CONFIG}/userns.conf" >> "${LXC_CONF_FILE}"
fi

echo "lxc.uts.name = ${LXC_NAME}" >> "${LXC_CONF_FILE}"
# set the hostname
cat <<EOF > ${LXC_ROOTFS}/etc/hostname
${LXC_NAME}
EOF

# set minimal hosts
cat <<EOF > ${LXC_ROOTFS}/etc/hosts
127.0.0.1   localhost
127.0.1.1   ${LXC_NAME}
EOF

if [ -n "$LXC_MAPPED_UID" ] && [ "$LXC_MAPPED_UID" != "-1" ]; then
    chown $LXC_MAPPED_UID $LXC_PATH/config $LXC_PATH/fstab >/dev/null 2>&1 || true
fi
if [ -n "$LXC_MAPPED_GID" ] && [ "$LXC_MAPPED_GID" != "-1" ]; then
    chgrp $LXC_MAPPED_GID $LXC_PATH/config $LXC_PATH/fstab >/dev/null 2>&1 || true
fi

exit 0
